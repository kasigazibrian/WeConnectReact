import React from 'react';
import { shallow, mount } from 'enzyme';
import { shallowToJson } from 'enzyme-to-json'
import LoginForm from "../Loginform";
// import axios from 'axios'
// import moxios from 'moxios'
// import MockAdapter from 'axios-mock-adapter';
// import NavigationBar from "../NavigationBar";
import mockAxios from 'jest-mock-axios';


describe('Login Component', ()=>{
    afterEach(() => {
        // cleaning up the mess left behind the previous test
        mockAxios.reset();
    });

    const wrapper = mount(<LoginForm />);
    // let mockAdapter = new MockAdapter(axios);
    // it("Test it renders correctly", ()=>{
    //     // let spy = jest.spyOn(LoginForm.prototype, "handleSubmit");
    //     // console.log(LoginForm.prototype);
    //     const wrapper = mount(<LoginForm/>);
    //     // expect(shallowToJson(wrapper))
    //     // console.log(wrapper.instance());
    //     // const form = wrapper.find('form')
    //     console.log(wrapper.length)
    //     expect(wrapper).toHaveLength(1)
    //     // expect(nav).toHaveLength(1)
    //     // console.log(form.props())
    //     // let username = form.find("input[name='username']");
    //     // console.log(username.props())
    //     // console.log(form);
    //     // username.instance().value = "brian";
    //     // console.log(username.instance().value)
    //     // console.log(username.instance().value)
    //     // form.simulate("submit")
    //     // console.log(wrapper.proptype)
    //     // expect(spy).toHaveBeenCalled()


    // });
    // it('check it changes state on input change', ()=>{
    //     let username = wrapper.find('input[name="username"]')
    //     username.simulate('change', {target: {name: "username",value: 'Mary'}});
    //     // wrapper.find('form')
    //     let password = wrapper.find('input[name="password"]')
    //     password.simulate('change', {target: {name: "password",value: 'mango'}});
    //     // console.log(username.instance())
    //     console.log(wrapper.state())
    //     // console.log( wrapper.find('form').props())
    //     expect(wrapper.state('username')).toBe('Mary');  
    //     expect(wrapper.state('password')).toBe('mango');  
    // });

    // it('specify response for a specific request', function (done) {
    //     let username = wrapper.find('input[name="username"]')
    //     username.simulate('change', {target: {name: "username",value: 'Mary'}});
    //     let password = wrapper.find('input[name="password"]')
    //     password.simulate('change', {target: {name: "password",value: 'mango'}});
    //     mockAdapter.onGet('http://localhost:5000/api/v2/login').reply(201, {
    //     data: {
    //      posts: ['Intro to git']
    //    }
    //    });
    //     const form = wrapper.find('form')
    //     form.simulate('submit')
        
       
      
           
              
        //   }).then(function () {

        //     // let list = document.querySelector('.UserList__Data')
        //     // equal(list.rows.length, 2)
        //     // equal(list.rows[0].cells[0].innerHTML, 'Fred')
        //     // equal(list.rows[1].cells[0].innerHTML, 'Wilma')
        //     done()
        //   })
        // })
        
    //   })
        // expect(images).toEqual(["cat.jpg"]);
        // it('Submit to the API', () => {
 
        //     let catchFn = jest.fn(),
        //         thenFn = jest.fn();
        //     let username = wrapper.find('input[name="username"]')
        //     username.simulate('change', {target: {name: "username",value: 'Mary'}});
        //     let password = wrapper.find('input[name="password"]')
        //     password.simulate('change', {target: {name: "password",value: 'mango'}});

            // console.log(wrapper.state())
            // using the component, which should make a server response
            // let clientMessage = 'client is saying hello!';
         
            // UppercaseProxy()
            //     .then(thenFn)
            //     .catch(catchFn);
         
            // since `post` method is a spy, we can check if the server request was correct
            // a) the correct method was used (post)
            // b) went to the correct web service URL ('/web-service-url/')
            // c) if the payload was correct ('client is saying hello!')
            // const user = {
            //     username: "Mary",
            //     password: "mango"

            // }
            // expect(mockAxios.post).toHaveBeenCalledWith('/api/v2/login', {data: user });
            // const form = wrapper.find('form')
            // await form.simulate("submit")
            // // simulating a server response
            // let responseObj = { response: { Message: "User has been added succesfully", Status: "Success", Token: "usertoken"} };
            // mockAxios.mockResponse(responseObj);
            // console.log(mockAxios.mockResponse(responseObj),"********************");
            // checking the `then` spy has been called and if the
            // response from the server was converted to upper case
            // expect(thenFn).toHaveBeenCalledWith('');
         
            // catch should not have been called
            // expect(catchFn).not.toHaveBeenCalled();
        // });

  

});